/*
* Information of note: These algorithms require/assume some filled environments.
* These will be globally available for the algorithms as they are filled up over time.
* Environments:
*   envSY: Maps system names to system data. This includes atomic systems, composites, references and SOIs
*   envL: Maps link names to the link definition. Contains cardinality, connection type and port names
*   envTY: Contains type information.
* Final point: There are a few global values beside the environments from the prior phase.
* There is a list of visited dependencies, to avoid circularity.
* There is a list of error messages.

* Some names may have to be changed, due to unfinished terminology.
*/

class ReferentialIntegrityVisitor{

    List<string> modeledSystems = [];

    void VisitNode(ModelNode node){
        modeledSystems = node.Dependencies.Select(x => x.soi.name);
        foreach((SoINode child, list<string> dependencies) system in node.Dependencies){
            foreach(string dependency in system.dependencies){
                if(!modeledSystems.Contains(dependency)){
                    Add new Exception($"Error in SoI {child.name}. Dependency  \"{dependency}\" is not among the included systems in the model.");
                }
            }
            VisitNode(soi);
        }
    }

    void VisitNode(SOINode node){
        foreach(SubsystemNode ssm in node.subsystems){
            VisitNode(ssm);
        }
        foreach(LinkNode link in node.Links){
            VisitNode(link);
        }
    }


    void VisitNode(LinkNode node){
        /*This is a very long check. Multi-phased
        * Phase One: Check if boundary link, to see what is allowed.
        * Phase Two: Check that specified ports exist.
        * Phase Three: Check that system and link cardinalities match.
            * Can be performed at the same time as Phase Two.
        * Phase Four: Check that all systems connected to the link will use it or can be used by it.
            * Checking that a system will use the link is trivial. Check that the link for an event is this.
                * We will check that there is an invocation inside said system at the Machine level
                * We will, however, need to check later on that all systems are TARGETED as well, ie. that reactive and self-referential communication occurs.
        */
        //Phase 1
        bool isBoundary = false;
        if(node.parent.BoundaryLinks.contains(node.name) && !node.parent is SoINode){
            isBoundary = true;
        }

        //Phase 2
        set<SubsystemNode> neighborsystems = node.parent.Subsystems;
        set<string> PossibleConnections;
        if(isBoundary){
            neighborsystems.AddRange(node.parent.parent.Subsystems);
        }
        
        foreach(SubsystemNode option in neighborsystems){
            if(option is CompositeNode comp){
                PossibleConnections.AddRange(comp.Interfaces);
            }else if(option is ReferenceNode ref){
                PossibleConnections.AddRange(envSY[ref.SoI].Interfaces);
            } else
                PossibleConnections.Add(option.name);
        }
        
        foreach(LinkConnection LC in node.LinkConnections){
            //Phase 2
            if(!PossibleConnections.Contains(LC.Port)){
                Add new Exception($"Error on Link {node.name} in composite {node.parent.name}. There is no accessable system with name \"{LC.Port}\" in the scope of the link.");
            }
            if(envSY[LC.Port].FullyQualifiedName.SoI != node.FullyQualifiedName.SoI && LC.ConnectionType != ConnectionType.Reactive){
                if(!envSY[LC.Port].EventDeclarations.IsAny(x => x.EventType == Events.Publisher))
                    Add new Exception($"Error on Link {node.name} in composite {node.parent.name}. There is a reference with a non-reactive connection, but no publisher.");
            }
            //Phase 3
            Cardinality SysCar = envSY[LC.Port].Cardinality;
            switch(LC.Cardinality.Type){
                case Cardinality.Z:
                    if(SysCar.Type == Cardinality.Z){
                        if(SysCar.count < LC.Cardinality.count){
                            Add new Exception($"Error on Link {node.name}: Link connection to {LC.Port} attempts to access more instances of system than are specified to exist.");    
                        }
                    } else if (SysCar == Cardinality.N){
                        //Always allowed. Forms a lower bound instead.
                        break;
                    }else{
                        //Only case left is sysCar.car = *, which cannot be accessed with a known number (except with tokens)
                        Add new Exception($"Error on Link {node.name}: Link connection to {LC.Port} has a Z+ cardinality to a *-cardinality system.");
                        break;
                    }
                case Cardinality.N:
                    if(SysCar.Type == Cardinality.Z){
                        //Always allowed. SysCar is an upper-bound. Not relevant here. 
                        break;
                    } else if (SysCar == Cardinality.N){
                        //Always allowed.
                        break;
                    }else{
                        //Only case left is sysCar.car = *, which cannot be accessed with a N.
                        Add new Exception($"Error on Link {node.name}: Link connection to {LC.Port} has a N cardinality to a *-cardinality system.");
                        break;
                    }
                    break;
                case Cardinality.U:
                    //All cases are allowed.
                    break;
            }
            //Phase 4:
            var sys = envSY[LC.Port];
            bool encountered = false;
            foreach(EventDeclNode edcl in sys.EventDeclarations.Filter(x => x.Type != Event.Publisher && x.Communicator is not null)){
                if(edcl.Communicator.Link == node.name){
                    encountered = true;
                    break;
                }
            }
            if(!encountered){
                Add new Exception($"Error in Link {node.name}: System {LC.Port} does not contain any communicators using the link.")
            }
        }
        //There is the final matter of if all reactive systems are communicated with, but that is best checked elsewhere, using an environment.
        envLU[node.name] = (node.LinkConnections.Select(x => x.Port))
    }

    void VisitNode(CompositeNode node){
        foreach(SubsystemNode ssm in node.Subsystems){
            VisitNode(ssm);
        }
        foreach(LinkNode link in node.Links){
            VisitNode(link)
        }
    }

    void VisitNode(AtomicSystemNode node){
        VisitNode(node.Controller);
        foreach(EventDeclNode edcl in node.EventDeclarations){
            VisitNode(edcl);
        }
    }

    void VisitNode(ReferenceNode node){
        if(!modeledSystems.Contains(node.SoI)){
            Add new Exception($"Error in reference {node.name} in composite {node.parent.name}. Cannot reference \"{node.dependency}\" as it is not a part of the model.");
        }
    }

    void VisitNode(ControllerNode node){

    }

    void VisitNode(EventDeclNode node){

    }

}